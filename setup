#!/usr/bin/env bash

set -euo pipefail  # Mejor manejo de errores

# ============================================================================
# NixOS Setup Script - Versión Mejorada
# ============================================================================

# Colores para output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly NC='\033[0m' # No Color

# Configuración
readonly SCRIPT_DIR="$(dirname "$(realpath "$0")")"
readonly SYSTEM_DIR="$SCRIPT_DIR/modules"
readonly HOSTS_DIR="$SCRIPT_DIR/modules/hosts"
readonly FLAKE_FILE="$SCRIPT_DIR/flake.nix"

# ============================================================================
# Funciones de Utilidad
# ============================================================================

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_header() {
    echo -e "\n${PURPLE}=== $1 ===${NC}\n"
}

confirm_action() {
    local message="$1"
    echo -e "${YELLOW}$message${NC}"
    read -p "¿Continuar? (y/N): " -n 1 -r
    echo
    [[ $REPLY =~ ^[Yy]$ ]]
}

# ============================================================================
# Funciones Principales
# ============================================================================

cleanup_git() {
    if [[ -d "$SCRIPT_DIR/.git" ]]; then
        log_warning "Removiendo directorio .git existente..."
        rm -rf "$SCRIPT_DIR/.git"
        log_success "Directorio .git removido"
    fi
}

ensure_directories() {
    mkdir -p "$SYSTEM_DIR" "$HOSTS_DIR"
    log_info "Directorios creados/verificados"
}

get_available_hosts() {
    local hosts=()
    
    # Buscar hosts en el flake.nix
    if [[ -f "$FLAKE_FILE" ]]; then
        # Extraer nombres de hosts del flake
        hosts+=($(grep -oP 'nixosConfigurations\.\K[a-zA-Z0-9_-]+' "$FLAKE_FILE" 2>/dev/null || true))
    fi
    
    # Buscar archivos de hosts en el directorio
    if [[ -d "$HOSTS_DIR" ]]; then
        for host_file in "$HOSTS_DIR"/*.nix; do
            if [[ -f "$host_file" ]]; then
                local hostname=$(basename "$host_file" .nix)
                if [[ ! " ${hosts[*]} " =~ " ${hostname} " ]]; then
                    hosts+=("$hostname")
                fi
            fi
        done
    fi
    
    # Si no se encuentran hosts, usar valores por defecto
    if [[ ${#hosts[@]} -eq 0 ]]; then
        hosts=("boltz" "rift")
        log_warning "No se encontraron hosts configurados, usando valores por defecto"
    fi
    
    printf '%s\n' "${hosts[@]}"
}

select_host() {
    local -a hosts
    mapfile -t hosts < <(get_available_hosts)
    
    if [[ ${#hosts[@]} -eq 0 ]]; then
        log_error "No se encontraron hosts disponibles"
        return 1
    fi
    
    log_header "Selección de Host"
    echo -e "${CYAN}Hosts disponibles:${NC}"
    
    for i in "${!hosts[@]}"; do
        echo "  $((i + 1))) ${hosts[i]}"
    done
    
    echo "  0) Detectar automáticamente"
    echo
    
    while true; do
        read -p "Selecciona un host (0-${#hosts[@]}): " choice
        
        if [[ "$choice" == "0" ]]; then
            # Auto-detección basada en hostname
            local current_hostname=$(hostname)
            for host in "${hosts[@]}"; do
                if [[ "$host" == "$current_hostname" ]]; then
                    log_success "Host detectado automáticamente: $host"
                    echo "$host"
                    return 0
                fi
            done
            
            log_warning "No se pudo detectar el host automáticamente"
            log_info "Hostname actual: $current_hostname"
            continue
        elif [[ "$choice" =~ ^[0-9]+$ ]] && [[ "$choice" -ge 1 ]] && [[ "$choice" -le ${#hosts[@]} ]]; then
            local selected_host="${hosts[$((choice - 1))]}"
            log_success "Host seleccionado: $selected_host"
            echo "$selected_host"
            return 0
        else
            log_error "Opción inválida. Por favor, selecciona un número válido."
        fi
    done
}

generate_hardware_config() {
    local host="$1"
    local target_file="$HOSTS_DIR/${host}-hardware.nix"
    
    log_header "Generación de Configuración de Hardware"
    
    if [[ -f "$target_file" ]]; then
        log_warning "El archivo '$target_file' ya existe."
        if ! confirm_action "¿Regenerar la configuración de hardware?"; then
            log_info "Configuración de hardware mantenida"
            return 0
        fi
    fi
    
    log_info "Generando configuración de hardware para host: $host"
    
    if nixos-generate-config --show-hardware-config > "$target_file"; then
        log_success "Configuración de hardware generada: $target_file"
        
        # Crear archivo de host básico si no existe
        local host_file="$HOSTS_DIR/${host}.nix"
        if [[ ! -f "$host_file" ]]; then
            cat > "$host_file" << EOF
{ config, lib, pkgs, inputs, username, ... }:

{
  imports = [
    ./${host}-hardware.nix
  ];

  # Configuración específica del host $host
  networking.hostName = "$host";
  
  # Agregar configuraciones específicas aquí
}
EOF
            log_success "Archivo de configuración de host creado: $host_file"
        fi
    else
        log_error "Error al generar la configuración de hardware"
        return 1
    fi
}

rebuild_system() {
    local host="$1"
    local mode="$2"  # switch, boot, test
    local extra_flags="$3"
    
    log_header "Reconstrucción del Sistema"
    log_info "Host: $host"
    log_info "Modo: $mode"
    
    local cmd="sudo nixos-rebuild $mode --flake .#$host"
    if [[ -n "$extra_flags" ]]; then
        cmd="$cmd $extra_flags"
    fi
    
    log_info "Ejecutando: $cmd"
    
    if eval "$cmd"; then
        log_success "Sistema reconstruido exitosamente"
    else
        log_error "Error al reconstruir el sistema"
        return 1
    fi
}

cleanup_system() {
    local option="$1"
    
    log_header "Limpieza del Sistema"
    
    case "$option" in
        "old")
            log_info "Removiendo generaciones antiguas..."
            if sudo nix-collect-garbage --delete-old; then
                log_success "Generaciones antiguas removidas"
            else
                log_error "Error al remover generaciones antiguas"
                return 1
            fi
            ;;
        "7days")
            log_info "Removiendo versiones históricas mayores a 7 días..."
            if sudo nix profile wipe-history --older-than 7d --profile /nix/var/nix/profiles/system; then
                log_success "Versiones históricas removidas"
            else
                log_error "Error al remover versiones históricas"
                return 1
            fi
            ;;
        "full")
            log_warning "Realizando limpieza completa del sistema..."
            if confirm_action "Esto removerá TODAS las generaciones antiguas y optimizará el store."; then
                sudo nix-collect-garbage --delete-old
                sudo nix-store --gc
                sudo nix-store --optimize
                log_success "Limpieza completa realizada"
            else
                log_info "Limpieza completa cancelada"
            fi
            ;;
    esac
}

show_system_info() {
    log_header "Información del Sistema"
    
    echo -e "${CYAN}Sistema:${NC} $(uname -srm)"
    echo -e "${CYAN}Hostname:${NC} $(hostname)"
    echo -e "${CYAN}Uptime:${NC} $(uptime -p)"
    
    if command -v nixos-version &> /dev/null; then
        echo -e "${CYAN}NixOS Version:${NC} $(nixos-version)"
    fi
    
    if [[ -f "$FLAKE_FILE" ]]; then
        echo -e "${CYAN}Flake Location:${NC} $FLAKE_FILE"
        echo -e "${CYAN}Available Hosts:${NC}"
        get_available_hosts | while read -r host; do
            echo "  - $host"
        done
    fi
    
    echo
}

display_menu() {
    log_header "NixOS Setup Script - Menú Principal"
    show_system_info
    
    echo -e "${CYAN}Host actual:${NC} ${SELECTED_HOST:-"No seleccionado"}"
    echo
    echo "Selecciona una opción:"
    echo "  1) Seleccionar/Cambiar Host"
    echo "  2) Generar Configuración de Hardware"
    echo "  3) Limpiar Generaciones Antiguas"
    echo "  4) Limpiar Versiones Históricas (>7 días)"
    echo "  5) Limpieza Completa del Sistema"
    echo "  6) Reconstruir Sistema (switch)"
    echo "  7) Reconstruir Sistema (boot)"
    echo "  8) Reconstruir Sistema (test)"
    echo "  9) Actualizar y Reconstruir"
    echo " 10) Mostrar Información del Sistema"
    echo "  0) Salir"
    echo
    read -p "Ingresa tu elección: " choice
}

# ============================================================================
# Script Principal
# ============================================================================

main() {
    log_header "NixOS Setup Script - Inicialización"
    
    # Verificar que estamos en NixOS
    if [[ ! -f /etc/NIXOS ]]; then
        log_error "Este script debe ejecutarse en un sistema NixOS"
        exit 1
    fi
    
    # Verificar permisos de sudo
    if ! sudo -n true 2>/dev/null; then
        log_info "Se requieren permisos de sudo para algunas operaciones"
        sudo -v
    fi
    
    # Inicialización
    cleanup_git
    ensure_directories
    
    # Selección inicial de host
    SELECTED_HOST=$(select_host)
    
    # Menú principal
    while true; do
        clear
        display_menu
        
        case $choice in
            1)
                SELECTED_HOST=$(select_host)
                ;;
            2)
                if [[ -n "${SELECTED_HOST:-}" ]]; then
                    generate_hardware_config "$SELECTED_HOST"
                else
                    log_error "Primero debes seleccionar un host"
                fi
                read -p "Presiona Enter para continuar..."
                ;;
            3)
                cleanup_system "old"
                read -p "Presiona Enter para continuar..."
                ;;
            4)
                cleanup_system "7days"
                read -p "Presiona Enter para continuar..."
                ;;
            5)
                cleanup_system "full"
                read -p "Presiona Enter para continuar..."
                ;;
            6)
                if [[ -n "${SELECTED_HOST:-}" ]]; then
                    rebuild_system "$SELECTED_HOST" "switch" ""
                else
                    log_error "Primero debes seleccionar un host"
                fi
                read -p "Presiona Enter para continuar..."
                ;;
            7)
                if [[ -n "${SELECTED_HOST:-}" ]]; then
                    rebuild_system "$SELECTED_HOST" "boot" ""
                else
                    log_error "Primero debes seleccionar un host"
                fi
                read -p "Presiona Enter para continuar..."
                ;;
            8)
                if [[ -n "${SELECTED_HOST:-}" ]]; then
                    rebuild_system "$SELECTED_HOST" "test" ""
                else
                    log_error "Primero debes seleccionar un host"
                fi
                read -p "Presiona Enter para continuar..."
                ;;
            9)
                if [[ -n "${SELECTED_HOST:-}" ]]; then
                    rebuild_system "$SELECTED_HOST" "switch" "--upgrade-all"
                else
                    log_error "Primero debes seleccionar un host"
                fi
                read -p "Presiona Enter para continuar..."
                ;;
            10)
                show_system_info
                read -p "Presiona Enter para continuar..."
                ;;
            0)
                log_success "¡Hasta luego!"
                exit 0
                ;;
            *)
                log_error "Opción inválida. Por favor, intenta nuevamente."
                read -p "Presiona Enter para continuar..."
                ;;
        esac
    done
}

# Ejecutar script principal
main "$@"
